{"version":3,"file":"js/256.js","mappings":"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","sources":["webpack://squeezelite-esp32-web-installer/./node_modules/improv-wifi-sdk/dist/const.js","webpack://squeezelite-esp32-web-installer/./node_modules/improv-wifi-sdk/dist/ble.js","webpack://squeezelite-esp32-web-installer/./node_modules/improv-wifi-sdk/dist/components/ib-dialog.js","webpack://squeezelite-esp32-web-installer/./node_modules/improv-wifi-sdk/dist/components/ib-textfield.js","webpack://squeezelite-esp32-web-installer/./node_modules/improv-wifi-sdk/dist/components/ib-button.js","webpack://squeezelite-esp32-web-installer/./node_modules/improv-wifi-sdk/dist/components/ib-circular-progress.js","webpack://squeezelite-esp32-web-installer/./node_modules/improv-wifi-sdk/dist/provision-dialog.js","webpack://squeezelite-esp32-web-installer/./node_modules/improv-wifi-sdk/dist/util.js","webpack://squeezelite-esp32-web-installer/./node_modules/improv-wifi-sdk/dist/provision.js"],"sourcesContent":["export const IMPROV_BLE_SERVICE = \"00467768-6228-2272-4663-277478268000\";\nexport const IMPROV_BLE_CURRENT_STATE_CHARACTERISTIC = \"00467768-6228-2272-4663-277478268001\";\nexport const IMPROV_BLE_ERROR_STATE_CHARACTERISTIC = \"00467768-6228-2272-4663-277478268002\";\nexport const IMPROV_BLE_RPC_COMMAND_CHARACTERISTIC = \"00467768-6228-2272-4663-277478268003\";\n// <command ID><total length><length of string 1><string 1>[<string 2 length≥, <string 2>]<CS>\nexport const IMPROV_BLE_RPC_RESULT_CHARACTERISTIC = \"00467768-6228-2272-4663-277478268004\";\nexport const IMPROV_BLE_CAPABILITIES_CHARACTERISTIC = \"00467768-6228-2272-4663-277478268005\";\nexport var ImprovCurrentState;\n(function (ImprovCurrentState) {\n    ImprovCurrentState[ImprovCurrentState[\"AUTHORIZATION_REQUIRED\"] = 1] = \"AUTHORIZATION_REQUIRED\";\n    ImprovCurrentState[ImprovCurrentState[\"AUTHORIZED\"] = 2] = \"AUTHORIZED\";\n    ImprovCurrentState[ImprovCurrentState[\"PROVISIONING\"] = 3] = \"PROVISIONING\";\n    ImprovCurrentState[ImprovCurrentState[\"PROVISIONED\"] = 4] = \"PROVISIONED\";\n})(ImprovCurrentState || (ImprovCurrentState = {}));\nexport const hasIdentifyCapability = (capabilities) => (capabilities & 1) === 1;\n","import { ImprovCurrentState, IMPROV_BLE_CURRENT_STATE_CHARACTERISTIC, IMPROV_BLE_ERROR_STATE_CHARACTERISTIC, IMPROV_BLE_RPC_COMMAND_CHARACTERISTIC, IMPROV_BLE_RPC_RESULT_CHARACTERISTIC, IMPROV_BLE_SERVICE, IMPROV_BLE_CAPABILITIES_CHARACTERISTIC, } from \"./const\";\nexport class ImprovBluetoothLE extends EventTarget {\n    constructor(device, logger) {\n        super();\n        this.device = device;\n        this.logger = logger;\n        this.errorState = 0 /* NO_ERROR */;\n        this.capabilities = 0;\n    }\n    get name() {\n        return this.device.name;\n    }\n    async initialize() {\n        this.logger.log(\"Trying to connect to Improv BLE service\");\n        this.device.addEventListener(\"gattserverdisconnected\", () => {\n            // If we're provisioned, we expect to be disconnected.\n            if (this.currentState === ImprovCurrentState.PROVISIONED) {\n                return;\n            }\n            this.dispatchEvent(new CustomEvent(\"disconnect\"));\n        });\n        // Do everything in sequence as some OSes do not support parallel GATT commands\n        // https://github.com/WebBluetoothCG/web-bluetooth/issues/188#issuecomment-255121220\n        await this.device.gatt.connect();\n        const service = await this.device.gatt.getPrimaryService(IMPROV_BLE_SERVICE);\n        this._currentStateChar = await service.getCharacteristic(IMPROV_BLE_CURRENT_STATE_CHARACTERISTIC);\n        this._errorStateChar = await service.getCharacteristic(IMPROV_BLE_ERROR_STATE_CHARACTERISTIC);\n        this._rpcCommandChar = await service.getCharacteristic(IMPROV_BLE_RPC_COMMAND_CHARACTERISTIC);\n        this._rpcResultChar = await service.getCharacteristic(IMPROV_BLE_RPC_RESULT_CHARACTERISTIC);\n        try {\n            const capabilitiesChar = await service.getCharacteristic(IMPROV_BLE_CAPABILITIES_CHARACTERISTIC);\n            const capabilitiesValue = await capabilitiesChar.readValue();\n            this.capabilities = capabilitiesValue.getUint8(0);\n        }\n        catch (err) {\n            console.warn(\"Firmware not according to spec, missing capability support.\");\n        }\n        this._currentStateChar.addEventListener(\"characteristicvaluechanged\", (ev) => this._handleImprovCurrentStateChange(ev.target.value));\n        await this._currentStateChar.startNotifications();\n        this._errorStateChar.addEventListener(\"characteristicvaluechanged\", (ev) => this._handleImprovErrorStateChange(ev.target.value));\n        await this._errorStateChar.startNotifications();\n        this._rpcResultChar.addEventListener(\"characteristicvaluechanged\", (ev) => this._handleImprovRPCResultChange(ev.target.value));\n        await this._rpcResultChar.startNotifications();\n        const curState = await this._currentStateChar.readValue();\n        const errorState = await this._errorStateChar.readValue();\n        this._handleImprovCurrentStateChange(curState);\n        this._handleImprovErrorStateChange(errorState);\n    }\n    close() {\n        if (this.device.gatt.connected) {\n            this.logger.debug(\"Disconnecting gatt\");\n            this.device.gatt.disconnect();\n        }\n    }\n    identify() {\n        this.sendRPC(2 /* IDENTIFY */, new Uint8Array());\n    }\n    async provision(ssid, password) {\n        const encoder = new TextEncoder();\n        const ssidEncoded = encoder.encode(ssid);\n        const pwEncoded = encoder.encode(password);\n        const data = new Uint8Array([\n            ssidEncoded.length,\n            ...ssidEncoded,\n            pwEncoded.length,\n            ...pwEncoded,\n        ]);\n        try {\n            const rpcResult = await this.sendRPCWithResponse(1 /* SEND_WIFI_SETTINGS */, data);\n            this.logger.debug(\"Provisioned! Disconnecting gatt\");\n            // We're going to set this result manually in case we get RPC result first\n            // that way it's safe to disconnect.\n            this.currentState = ImprovCurrentState.PROVISIONED;\n            this.dispatchEvent(new CustomEvent(\"state-changed\"));\n            this.device.gatt.disconnect();\n            this.dispatchEvent(new CustomEvent(\"disconnect\"));\n            this.nextUrl =\n                rpcResult.values.length > 0 ? rpcResult.values[0] : undefined;\n            return this.nextUrl;\n        }\n        catch (err) {\n            // Do nothing. Error code will handle itself.\n            return undefined;\n        }\n    }\n    async sendRPCWithResponse(command, data) {\n        // Commands that receive feedback will finish when either\n        // the state changes or the error code becomes not 0.\n        if (this._rpcFeedback) {\n            throw new Error(\"Only 1 RPC command that requires feedback can be active\");\n        }\n        return await new Promise((resolve, reject) => {\n            this._rpcFeedback = { command, resolve, reject };\n            this.sendRPC(command, data);\n        });\n    }\n    sendRPC(command, data) {\n        this.logger.debug(\"RPC COMMAND\", command, data);\n        const payload = new Uint8Array([command, data.length, ...data, 0]);\n        payload[payload.length - 1] = payload.reduce((sum, cur) => sum + cur, 0);\n        this.RPCResult = undefined;\n        this._rpcCommandChar.writeValueWithoutResponse(payload);\n    }\n    _handleImprovCurrentStateChange(encodedState) {\n        const state = encodedState.getUint8(0);\n        this.logger.debug(\"improv current state\", state);\n        this.currentState = state;\n        this.dispatchEvent(new CustomEvent(\"state-change\"));\n    }\n    _handleImprovErrorStateChange(encodedState) {\n        const state = encodedState.getUint8(0);\n        this.logger.debug(\"improv error state\", state);\n        this.errorState = state;\n        // Sending an RPC command sets error to no error.\n        // If we get a real error it means the RPC command is done.\n        if (state !== 0 /* NO_ERROR */) {\n            if (this._rpcFeedback) {\n                this._rpcFeedback.reject(state);\n                this._rpcFeedback = undefined;\n            }\n        }\n    }\n    _handleImprovRPCResultChange(encodedResult) {\n        this.logger.debug(\"improv RPC result\", encodedResult);\n        const command = encodedResult.getUint8(0);\n        const result = {\n            command,\n            values: [],\n        };\n        const dataLength = encodedResult.getUint8(1);\n        const baseOffset = 2;\n        const decoder = new TextDecoder();\n        for (let start = 0; start < dataLength;) {\n            const valueLength = encodedResult.getUint8(baseOffset + start);\n            const valueBytes = new Uint8Array(valueLength);\n            const valueOffset = baseOffset + start + 1;\n            for (let i = 0; i < valueLength; i++) {\n                valueBytes[i] = encodedResult.getUint8(valueOffset + i);\n            }\n            result.values.push(decoder.decode(valueBytes));\n            start += valueLength + 1; // +1 for length byte\n        }\n        this.RPCResult = result;\n        if (this._rpcFeedback) {\n            if (this._rpcFeedback.command !== command) {\n                this.logger.error(\"Received \");\n            }\n            this._rpcFeedback.resolve(result);\n            this._rpcFeedback = undefined;\n        }\n    }\n}\n","import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nexport class IbDialog extends DialogBase {\n}\nIbDialog.styles = [styles];\ncustomElements.define(\"ib-dialog\", IbDialog);\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nexport class IbTextfield extends TextFieldBase {\n}\nIbTextfield.styles = [styles];\ncustomElements.define(\"ib-textfield\", IbTextfield);\n","import { ButtonBase } from \"@material/mwc-button/mwc-button-base\";\nimport { styles } from \"@material/mwc-button/styles.css\";\nexport class IbButton extends ButtonBase {\n}\nIbButton.styles = [styles];\ncustomElements.define(\"ib-button\", IbButton);\n","import { CircularProgressBase } from \"@material/mwc-circular-progress/mwc-circular-progress-base\";\nimport { styles } from \"@material/mwc-circular-progress/mwc-circular-progress.css\";\nexport class IbCircularProgress extends CircularProgressBase {\n}\nIbCircularProgress.styles = [styles];\ncustomElements.define(\"ib-circular-progress\", IbCircularProgress);\n","import { __decorate } from \"tslib\";\nimport { LitElement, html, css } from \"lit\";\nimport { customElement, query, state } from \"lit/decorators.js\";\nimport \"./components/ib-dialog\";\nimport \"./components/ib-textfield\";\nimport \"./components/ib-button\";\nimport \"./components/ib-circular-progress\";\nimport { hasIdentifyCapability, ImprovCurrentState, } from \"./const\";\nconst ERROR_ICON = \"⚠️\";\nconst OK_ICON = \"🎉\";\nconst AUTHORIZE_ICON = \"👉\";\nlet ProvisionDialog = class ProvisionDialog extends LitElement {\n    constructor() {\n        super(...arguments);\n        this._state = \"CONNECTING\";\n        this._improvErrorState = 0 /* NO_ERROR */;\n        this._improvCapabilities = 0;\n        this._busy = false;\n    }\n    render() {\n        let heading = \"\";\n        let content;\n        let hideActions = false;\n        if (this._state === \"CONNECTING\") {\n            content = this._renderProgress(\"Connecting\");\n            hideActions = true;\n        }\n        else if (this._state === \"ERROR\") {\n            content = this._renderMessage(ERROR_ICON, `An error occurred. ${this._error}`, true);\n        }\n        else if (this._improvCurrentState === ImprovCurrentState.AUTHORIZATION_REQUIRED) {\n            content = this._renderMessage(AUTHORIZE_ICON, \"Press the authorize button on the device\", false);\n        }\n        else if (this._improvCurrentState === ImprovCurrentState.AUTHORIZED) {\n            if (this._busy) {\n                content = this._renderProgress(\"Provisioning\");\n                hideActions = true;\n            }\n            else {\n                heading = \"Configure Wi-Fi\";\n                content = this._renderImprovAuthorized();\n            }\n        }\n        else if (this._improvCurrentState === ImprovCurrentState.PROVISIONING) {\n            content = this._renderProgress(\"Provisioning\");\n            hideActions = true;\n        }\n        else if (this._improvCurrentState === ImprovCurrentState.PROVISIONED) {\n            content = this._renderImprovProvisioned();\n        }\n        else {\n            content = this._renderMessage(ERROR_ICON, `Unexpected state: ${this._state} - ${this._improvCurrentState}`, true);\n        }\n        return html `\n      <ib-dialog\n        open\n        .heading=${heading}\n        scrimClickAction\n        @closed=${this._handleClose}\n        .hideActions=${hideActions}\n        >${content}</ib-dialog\n      >\n    `;\n    }\n    _renderProgress(label) {\n        return html `\n      <div class=\"center\">\n        <div>\n          <ib-circular-progress\n            active\n            indeterminate\n            density=\"8\"\n          ></ib-circular-progress>\n        </div>\n        ${label}\n      </div>\n    `;\n    }\n    _renderMessage(icon, label, showClose) {\n        return html `\n      <div class=\"center\">\n        <div class=\"icon\">${icon}</div>\n        ${label}\n      </div>\n      ${showClose &&\n            html `\n        <ib-button\n          slot=\"primaryAction\"\n          dialogAction=\"ok\"\n          label=\"Close\"\n        ></ib-button>\n      `}\n    `;\n    }\n    _renderImprovAuthorized() {\n        let error;\n        switch (this._improvErrorState) {\n            case 3 /* UNABLE_TO_CONNECT */:\n                error = \"Unable to connect\";\n                break;\n            case 0 /* NO_ERROR */:\n                break;\n            default:\n                error = `Unknown error (${this._improvErrorState})`;\n        }\n        return html `\n      <div>\n        Enter the credentials of the Wi-Fi network that you want\n        ${this.client.name || \"your device\"} to connect to.\n        ${hasIdentifyCapability(this._improvCapabilities)\n            ? html `\n              <button class=\"link\" @click=${this._identify}>\n                Identify the device.\n              </button>\n            `\n            : \"\"}\n      </div>\n      ${error ? html `<p class=\"error\">${error}</p>` : \"\"}\n      <ib-textfield label=\"Network Name\" name=\"ssid\"></ib-textfield>\n      <ib-textfield\n        label=\"Password\"\n        name=\"password\"\n        type=\"password\"\n      ></ib-textfield>\n      <ib-button\n        slot=\"primaryAction\"\n        label=\"Connect\"\n        @click=${this._provision}\n      ></ib-button>\n      <ib-button\n        slot=\"secondaryAction\"\n        dialogAction=\"close\"\n        label=\"Cancel\"\n      ></ib-button>\n    `;\n    }\n    _renderImprovProvisioned() {\n        return html `\n      <div class=\"center\">\n        <div class=\"icon\">${OK_ICON}</div>\n        Provisioned!\n      </div>\n      ${this.client.nextUrl === undefined\n            ? html `\n            <ib-button\n              slot=\"primaryAction\"\n              dialogAction=\"ok\"\n              label=\"Close\"\n            ></ib-button>\n          `\n            : html `\n            <a\n              href=${this.client.nextUrl}\n              slot=\"primaryAction\"\n              class=\"has-button\"\n              dialogAction=\"ok\"\n            >\n              <ib-button label=\"Next\"></ib-button>\n            </a>\n          `}\n    `;\n    }\n    firstUpdated(changedProps) {\n        super.firstUpdated(changedProps);\n        this.client.addEventListener(\"state-changed\", () => {\n            this._state = \"IMPROV-STATE\";\n            this._busy = false;\n            this._improvCurrentState = this.client.currentState;\n        });\n        this.client.addEventListener(\"error-changed\", () => {\n            this._improvErrorState = this.client.errorState;\n            // Sending an RPC command sets error to no error.\n            // If we get a real error it means the RPC command is done.\n            if (this._improvErrorState !== 0 /* NO_ERROR */) {\n                this._busy = false;\n            }\n        });\n        this.client.addEventListener(\"disconnect\", () => {\n            // If we're provisioned, we expect to be disconnected.\n            if (this._state === \"IMPROV-STATE\" &&\n                this._improvCurrentState === ImprovCurrentState.PROVISIONED) {\n                return;\n            }\n            this._state = \"ERROR\";\n            this._error = \"Device disconnected.\";\n        });\n        this._connect();\n    }\n    async _connect() {\n        try {\n            await this.client.initialize();\n            this._improvCurrentState = this.client.currentState;\n            this._improvErrorState = this.client.errorState;\n            this._improvCapabilities = this.client.capabilities;\n            this._state = \"IMPROV-STATE\";\n        }\n        catch (err) {\n            this._state = \"ERROR\";\n            this._error = err.message;\n        }\n    }\n    async _provision() {\n        this._busy = true;\n        try {\n            await this.client.provision(this._inputSSID.value, this._inputPassword.value);\n        }\n        catch (err) {\n            // Ignore, error state takes care of this.\n        }\n        finally {\n            this._busy = false;\n        }\n    }\n    _identify() {\n        this.client.identify();\n    }\n    updated(changedProps) {\n        super.updated(changedProps);\n        if (changedProps.has(\"_state\") ||\n            (this._state === \"IMPROV-STATE\" &&\n                changedProps.has(\"_improvCurrentState\"))) {\n            const state = this._state === \"IMPROV-STATE\"\n                ? ImprovCurrentState[this._improvCurrentState] || \"UNKNOWN\"\n                : this._state;\n            this.stateUpdateCallback({ state });\n        }\n        if ((changedProps.has(\"_improvCurrentState\") || changedProps.has(\"_state\")) &&\n            this._state === \"IMPROV-STATE\" &&\n            this._improvCurrentState === ImprovCurrentState.AUTHORIZED) {\n            const input = this._inputSSID;\n            input.updateComplete.then(() => input.focus());\n        }\n    }\n    _handleClose() {\n        this.client.close();\n        this.parentNode.removeChild(this);\n    }\n};\nProvisionDialog.styles = css `\n    :host {\n      --mdc-dialog-max-width: 390px;\n      --mdc-theme-primary: var(--improv-primary-color, #03a9f4);\n      --mdc-theme-on-primary: var(--improv-on-primary-color, #fff);\n    }\n    ib-textfield {\n      display: block;\n    }\n    ib-textfield {\n      margin-top: 16px;\n    }\n    .center {\n      text-align: center;\n    }\n    ib-circular-progress {\n      margin-bottom: 16px;\n    }\n    a.has-button {\n      text-decoration: none;\n    }\n    .icon {\n      font-size: 50px;\n      line-height: 80px;\n      color: black;\n    }\n    .error {\n      color: #db4437;\n    }\n    button.link {\n      background: none;\n      color: inherit;\n      border: none;\n      padding: 0;\n      font: inherit;\n      text-align: left;\n      text-decoration: underline;\n      cursor: pointer;\n    }\n  `;\n__decorate([\n    state()\n], ProvisionDialog.prototype, \"_state\", void 0);\n__decorate([\n    state()\n], ProvisionDialog.prototype, \"_improvCurrentState\", void 0);\n__decorate([\n    state()\n], ProvisionDialog.prototype, \"_improvErrorState\", void 0);\n__decorate([\n    state()\n], ProvisionDialog.prototype, \"_improvCapabilities\", void 0);\n__decorate([\n    state()\n], ProvisionDialog.prototype, \"_busy\", void 0);\n__decorate([\n    query(\"ib-textfield[name=ssid]\")\n], ProvisionDialog.prototype, \"_inputSSID\", void 0);\n__decorate([\n    query(\"ib-textfield[name=password]\")\n], ProvisionDialog.prototype, \"_inputPassword\", void 0);\nProvisionDialog = __decorate([\n    customElement(\"improv-wifi-provision-dialog\")\n], ProvisionDialog);\n","export const fireEvent = (eventTarget, type, \n// @ts-ignore\ndetail, options) => {\n    options = options || {};\n    const event = new CustomEvent(type, {\n        bubbles: options.bubbles === undefined ? true : options.bubbles,\n        cancelable: Boolean(options.cancelable),\n        composed: options.composed === undefined ? true : options.composed,\n        detail,\n    });\n    eventTarget.dispatchEvent(event);\n};\n","import { ImprovBluetoothLE } from \"./ble\";\nimport { IMPROV_BLE_SERVICE } from \"./const\";\nimport \"./provision-dialog\";\nimport { fireEvent } from \"./util\";\nexport const startProvisioning = async (button) => {\n    let device;\n    try {\n        device = await navigator.bluetooth.requestDevice({\n            filters: [{ services: [IMPROV_BLE_SERVICE] }],\n        });\n    }\n    catch (err) {\n        console.error(\"Failed to get device\", err);\n    }\n    if (!device) {\n        return;\n    }\n    const el = document.createElement(\"improv-wifi-provision-dialog\");\n    el.client = new ImprovBluetoothLE(device, console);\n    el.stateUpdateCallback = (state) => {\n        fireEvent(button, \"state-changed\", state);\n    };\n    document.body.appendChild(el);\n};\n"],"names":["IMPROV_BLE_SERVICE","ImprovCurrentState","ImprovBluetoothLE","EventTarget","constructor","device","logger","super","this","errorState","capabilities","name","async","log","addEventListener","currentState","PROVISIONED","dispatchEvent","CustomEvent","gatt","connect","service","getPrimaryService","_currentStateChar","getCharacteristic","_errorStateChar","_rpcCommandChar","_rpcResultChar","capabilitiesChar","capabilitiesValue","readValue","getUint8","err","console","warn","ev","_handleImprovCurrentStateChange","target","value","startNotifications","_handleImprovErrorStateChange","_handleImprovRPCResultChange","curState","close","connected","debug","disconnect","identify","sendRPC","Uint8Array","ssid","password","encoder","TextEncoder","ssidEncoded","encode","pwEncoded","data","length","rpcResult","sendRPCWithResponse","nextUrl","values","undefined","command","_rpcFeedback","Error","Promise","resolve","reject","payload","reduce","sum","cur","RPCResult","writeValueWithoutResponse","encodedState","state","encodedResult","result","dataLength","decoder","TextDecoder","start","valueLength","valueBytes","valueOffset","i","push","decode","error","IbDialog","styles","customElements","define","IbTextfield","IbButton","IbCircularProgress","ProvisionDialog","arguments","_state","_improvErrorState","_improvCapabilities","_busy","render","content","heading","hideActions","_renderProgress","_renderMessage","_error","_improvCurrentState","AUTHORIZATION_REQUIRED","AUTHORIZED","_renderImprovAuthorized","PROVISIONING","_renderImprovProvisioned","_handleClose","label","icon","showClose","client","_identify","_provision","firstUpdated","changedProps","_connect","initialize","message","provision","_inputSSID","_inputPassword","updated","has","stateUpdateCallback","input","updateComplete","then","focus","parentNode","removeChild","prototype","startProvisioning","button","navigator","bluetooth","requestDevice","filters","services","el","document","createElement","eventTarget","type","detail","options","event","bubbles","cancelable","Boolean","composed","fireEvent","body","appendChild"],"sourceRoot":""}