substitutions:
  name: esphome-web-xxxxxx
  friendly_name: Louder-Esparagus
  task_stack_in_psram: "false" # important to disable this for non-S3 model

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.7.0
  name_add_mac_suffix: false
  platformio_options:
    board_build.flash_mode: dio

esp32:
  board: mhetesp32minikit
  flash_size: 16MB
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      CONFIG_BT_ALLOCATION_FROM_SPIRAM_FIRST: "y"
      CONFIG_BT_BLE_DYNAMIC_ENV_MEMORY: "y"

      CONFIG_MBEDTLS_EXTERNAL_MEM_ALLOC: "y"
      CONFIG_MBEDTLS_SSL_PROTO_TLS1_3: "y"  # TLS1.3 support isn't enabled by default in IDF 5.1.5

# Enable logging
logger:
  level: DEBUG
  
wifi:
  ssid: !secret esphome_wifi_ssid
  password: !secret esphome_wifi_password
  ap:
    ssid: "$name Hotspot"
    password: !secret esphome_ap_password

captive_portal:

# Allow Over-The-Air updates
ota:
  platform: esphome
  password: !secret esphome_ota_password

### Optional if you want ethernet (then remove above wifi config)
#ethernet:
#  type: W5500
#  clk_pin: GPIO18
#  mosi_pin: GPIO23
#  miso_pin: GPIO19
#  cs_pin: GPIO05
#  interrupt_pin: GPIO35
#  reset_pin: GPIO14

# Enable Home Assistant API
api:

network:
  enable_ipv6: true

psram:
  speed: 80MHz

external_components:
  - source: github://mrtoy-me/esphome-tas5805m@main
    components: [ tas5805m ]
    refresh: 60s
  - source: github://c-MM/esphome-snapclient
    components: [ snapclient ]
    refresh: 0s

globals:
  - id: current_volume
    type: float

i2c:
  sda: GPIO21
  scl: GPIO27
  frequency: 400kHz
  scan: True

### TAS5805M DAC configuration
audio_dac:
  - platform: tas5805m
    id: tas5805m_dac
    enable_pin: GPIO33  # Physical pin connected to PWDN pin
    dac_mode:  BTL      # 'BTL' / Bridge Tied Load - 2Ch Stereo, or 'PBTL' / Parallel Bridge Tied Load - 1Ch Mono (double power)
    mixer_mode: STEREO  # STEREO, STEREO_INVERSE, MONO, LEFT, RIGHT
    refresh_eq: BY_SWITCH
    analog_gain: -6db   # Startup Gain or Output voltage swing - pick based on the power supply voltage: https://github.com/sonocotta/esp32-tas5805m-dac?tab=readme-ov-file#digital-volume-and-analog-gain
    # volume_max: -6dB  # Max HA volume mapping to Digital Volume control, goes as high as +24dB, but not recommend going much above 0 dB, risking to cause clipping on high volume
    volume_min: -60db   # Min HA volume mapping to Digital Volume control, goes as low as -103dB, but prefer to set higher to have a reasonable volume range
    update_interval: 5s # How often fault registers are read and cleared

i2s_audio:
  i2s_lrclk_pin: GPIO25
  i2s_bclk_pin: GPIO26

### Snapclient component is a work in progress, not yet ready for production use
# More details:
# https://github.com/c-MM/esphome-snapclient/
# https://github.com/esphome/esphome/pull/8350
snapclient:
  hostname: 192.168.1.49   # at this time auto-discovery does not work, so you need to specify the server IP address
  port: 1704               # default port, no need to change unless you have changed it on the server side
  name: $friendly_name     # this is the name that will appear in the snapcast clients list
  i2s_dout_pin: GPIO22     # I2S data out pin
  webserver_port: 8080     # start webserver for snapclient controls

switch:
  # Enable USB-PD trigger chip. Will request 19V from the power supply, but might be limited by the power supply capabilities
  # When off, will use 5V from the USB port, which is enough to power the DAC and ESP32 with limited power
  - platform: gpio
    id: pd_enable
    pin: GPIO13
    restore_mode: ALWAYS_ON
    inverted: true
    name: "PD Power Enable"

  - platform: tas5805m
    # Will be operated automatially. When disabled DAC will drow dramatically less power
    enable_dac:
      name: Enable Louder
      id: enable_louder
      restore_mode: ALWAYS_ON
    # Will be operated automatially. If you use EQ it is required to set it ON
    enable_eq:
      name: Enable EQ Control
      restore_mode: ALWAYS_OFF

number:
  ### 15 Band EQ. At this point frequency and bandwidth are hard-wired, since BQ coefficients table are not calculated on the fly
  # Each band regulates within [-15dB .. +15 dB] range
  # Each band overlaps with nearby bands, so with extreme settings it can go as high or low as -/+30dB, so use with care
  - platform: tas5805m
    eq_gain_band20Hz:
      name: Gain ---20Hz
    eq_gain_band31.5Hz:
      name: Gain ---31.5Hz
    eq_gain_band50Hz:
      name: Gain ---50Hz
    eq_gain_band80Hz:
      name: Gain ---80Hz
    eq_gain_band125Hz:
      name: Gain --125Hz
    eq_gain_band200Hz:
      name: Gain --200Hz
    eq_gain_band315Hz:
      name: Gain --315Hz
    eq_gain_band500Hz:
      name: Gain --500Hz
    eq_gain_band800Hz:
      name: Gain --800Hz
    eq_gain_band1250Hz:
      name: Gain -1250Hz
    eq_gain_band2000Hz:
      name: Gain -2000Hz
    eq_gain_band3150Hz:
      name: Gain -3150Hz
    eq_gain_band5000Hz:
      name: Gain -5000Hz
    eq_gain_band8000Hz:
      name: Gain -8000Hz
    eq_gain_band16000Hz:
      name: Gain 16000Hz

### Faults clear registers read from TAS5805M
# Every time fault is detected, it will be reported to HA and clears afterwards
# This is to ensure that device will not stuck in the fault state until reboot
sensor:
  - platform: tas5805m
    faults_cleared:
      name: "Times Faults Cleared"
    update_interval: 60s

### Faults registers read directly from TAS5805M
# TODO: Over Temperature Warning -> reduce volume automatically before it goes into shutdown
binary_sensor:
  - platform: tas5805m
    have_fault:
      name: Any Faults
    left_channel_dc_fault:
      name: Left Channel DC Fault
    right_channel_dc_fault:
      name: Right Channel DC Fault
    left_channel_over_current:
      name: Left Channel Over Current
    right_channel_over_current:
      name: Right Channel Over Current
    otp_crc_check:
      name: CRC Check Fault
    bq_write_failed:
      name: BQ Write Failure
    clock fault:
      name: I2S Clock Fault
    pcdd_over_voltage:
      name: PCDD Over Voltage
    pcdd_under_voltage:
      name: PCDD Under Voltage
    over_temp_shutdown:
      name: Over Temperature Shutdown Fault
    over_temp_warning:
      name: Over Temperature Warning
      id: over_temperature_warning

### RGB light config
light:
  - platform: esp32_rmt_led_strip
    id: rgb_front_led
    name: "${friendly_name} LED"
    rgb_order: GRB
    pin: GPIO12
    num_leds: 1
    chipset: ws2812
    default_transition_length: 0s

### IR reader config. Add your own IR codes as needed
remote_receiver:
  pin: 
    number: GPIO39
    inverted: true
    mode:
      input: true
  dump: all

button:
  - platform: restart
    id: restart_btn
    name: "${friendly_name} REBOOT"

# ### Optional settings for OLED screen 
# # prerequisites:
# font:
#   - file:
#       type: gfonts
#       family: Roboto
#       weight: regular
#     id: roboto_medium
#     size: 32
#     glyphs: [' ', ':', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']

# spi:
#   clk_pin: GPIO18
#   mosi_pin: GPIO23
#   miso_pin: GPIO19

# time:
#   - platform: sntp
#     id: esptime

# ### Example display configuration, showing the clock
# display:
#   - platform: ssd1306_spi
#     model: SH1106 128x64
#     cs_pin: GPIO15
#     dc_pin: GPIO04
#     reset_pin: GPIO32
#     update_interval: 1s
#     lambda: |-
#         // display clock
#         auto hours = id(esptime).now().hour;
#         auto minutes = id(esptime).now().minute;
#         auto seconds = id(esptime).now().second;
#         auto dot = seconds % 2 == 0 ? " " : ":";
#         it.printf(64, 32, id(roboto_medium), TextAlign::CENTER, "%d%s%02d", hours, dot ,minutes);